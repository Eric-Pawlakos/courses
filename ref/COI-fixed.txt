C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + Basic computing
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen, McGregor
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This first course, Basic Computing, moves students from simple +exploratory computing+ via an interactive shell (Python or R, say) to writing scripts to designing complete programs. We teach through case studies that cast the core artifacts of the digital humanities, data journalism and computational social science as data. We unpack best practices for students including a session on software licenses and code sharing.
Syllabus:
CJxxxx Basic Computing, 3 units
Description: An introduction to the ways in which the computer and data technologies can be partners in creative practices. We will emphasize writing code over point-and-click interfaces, presenting the computer as a programmable object. Through a series of projects, students will move from exploratory sessions, to writing small programs, to sharing code with others in their class. They will learn by making and, in the process, master a "scripting language" like Python or Ruby. Projects will examine and extend existing technologies in the digital humanities, computational journalism, architecture and design and will likely deal in text and images, in human relationships as exhibited through social networks, in map making and reporting.
Grading: While the precise grading of the course will depend on the instructor, it should be structured around a series of weekly short assignments, 3 longer assignments and a final project. The shorter +drills+ help students learn to translate simple questions into code, while the longer assignments involve more substantial building. The final project could be individual or group, with the latter requiring documentation of each participant+s role.
Readings: Depending on the programming language of choice, the course will have a core textbook together with extensions (packages, modules, libraries) to cover time, location, text and networks as high-level objects. Lessons will be augmented with readings from computational/data journalism, the digital humanities and the computational social sciences to help describe the emerging role of computing within these fields. For example, selections by Stephen Ramsay, Franco Moretti, Johanna Drucker, and Lev Manovich could serve this role for the digital humanities; while Jonathan Stray, Sarah Cohen, and a survey of data journalism projects could work for journalism.
Strategy: Students will use either the iPython notebook or RStudio for the first half of the course + Students will work +in the cloud+ with, say, copies of a custom AMI. These frameworks allow us to sidestep hardware issues (some students with PCs, some with Macs), provide a consistent (across platforms) coding interface, and avoid any discussion of UNIX or even software installation until late in the semester.
Approximate topic outline:
Introduction
Background on representing time, location and text as data, as computable
Examples from journalism, the digital humanities and computational social science
Core coding concepts through case studies analyzing time, location and text as data
Language basics
Built-in data types
Simple data structures, lists and dictionaries
Control flow
Expressions, loops and conditionals
Functions
From interactive shells to simple scripts
Exploratory computing
Finding and using code authored by others
Best practices for writing code
Documentation and methods for reproducibility
Tools for programming
Identifying and writing reusable components
Revisit case studies, adding objects to represent social networks as another example
Software objects and object-oriented programming
Using objects, extending objects, making your own
Writing with code + Models for incorporating coding into journalism, the humanities and social science
Introduction to UNIX, the file system and the basic pipeline
Presentation of simple utilities in the context of one of the case studies
From simple scripts to well-defined programs
Authoring packages, modules or libraries
Platforms for sharing code
Software licenses
The practice of coding
Strategies for checking code
Defensive coding and programming with exceptions
Debugging
Presentation of final projects
Technicalities: There are several languages that would provide relatively high-level access to complex objects including Ruby, Python and R. We outline what course resources might look like depending on the choice of programming language.
Example: Python

Language:
http://python.org/
http://ipython.org/notebook.html

Reference:
Natural Language Processing with Python
-- Analyzing Text with the Natural Language Toolkit
Steven Bird, Ewan Klein, and Edward Loper

Programming Python, Lutz

Natural language processing:
http://nltk.org/

Statistical graphics, including map making:
http://pandas.pydata.org/
http://matplotlib.org/

Networks:
http://networkx.github.io/

Example: R

Language:
http://r-project.org/
http://rstudio.org

Natural language processing:
tm, the Text Mining Package

Statistical graphics, including map making:
ggplot2, the Grammar of Graphics
maptools, Tools for reading and handling spatial objects

Networks:
network, Classes for Relational Data
sna, Tools for Social Network Analysis




C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + Data and databases
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This course, Data and Databases, moves students accessing data via APIs to authoring a web service. We teach through case studies that cast the core artifacts of the digital humanities, data journalism and computational social science as data. We examine the current frameworks for storing and querying data. We introduce the +geometry of data+ via single tables and then work up to the full relational model. We also consider relatively recent tools like No-SQL document stores. Finally, we emphasize certain important concepts for practicing journalists or digital humanities researchers including data provenance, the role of metadata and the rise of the semantic web.
Syllabus:
CJxxxx 2. Data and Databases, 3 units
Description: Consideration of both the scientific and social implications of counting, turning the world into bits. Students will learn both human protocols (census and survey, interview and crowd sourcing, experiments) and computer- or computer-assisted strategies and tools for collecting data. These distinctions will prove useful whether students collect data on their own or simply access data collected and published by some other organization. Students will then spend some time thinking through representations of core "data types" like time, location, text, image, sound and relationships (or networks), and the computational "affordances" associated with each. Students will study several common metaphors for organizing and storing data + from structureless key-value stores, to document collections like MongoDB, to a single table or spreadsheet, to the "multiple tables" of a relational database. We will also discuss ideas behind publishing or sharing data, moving from HTML documents and Web 1.0 to data services and APIs in Web 2.0, to semantics in Web 3.0. These efforts will be project-driven, with students using and building modern data services with a scripting language. Their projects will underscore the reality that data are plentiful and circulate and interact in a kind of informational ecosystem. As researchers, our students will be called on both to access and to publish data products.
Grading: While the precise grading of the course will depend on the instructor, it should involve a series of weekly short assignments, 2-3 longer assignments and a final project. The shorter +drills+ help students learn to structure simple objects as data, while the longer assignments involve more substantial building. The final project could be individual or group, with the latter requiring documentation of each participant+s role, and should involve making a new web service.
Textbooks: Each technology (a SQL DBMS, MongoDB) will have reference material. There will be ample readings from computer-assisted reporting and the digital humanities on the design and use of databases, on databases and narrative. One reasonable entry-level text is Murrell+s book on data technologies. There are plenty of other options.
Murrell, Paul Introduction to Data Technologies https://www.stat.auckland.ac.nz/~paul/ItDT
Approximate topic outline:
Introduction
Data as service
Background on data representation for storage and communication
Structured vs. unstructured data
Proprietary vs. open standards
Markup
Metadata
Case studies illustrating various data formats
The UNIX filesystem refresher
Binary formats like images
Plain text formats
CSV
HTML, XML
JSON
Spreadsheets
Shapefiles
APIs and web services
Experiments accessing and combining data from different services
Creating an API (Flask, say, with Python)
Documentation and reproducibility
Background on computer networks and UNIX networking tools
Case studies to answer the question +What is a database and why should we use it?
Visual investigation of relational data via sqlite3 shell or other interactive interface
The relational model and database design
The geometry of single-table data and simple numerical linear algebra
The Grand Tour (sequential, random, low-dimensional projections) visualization technique
Introduction to SQL
No-SQL models
Key-value stores
Document databases (MongoDB)
Special topics
Digitization and archives
The importance of metadata
Data provenance
Tools and strategies for creating structure from unstructured data
Web 1.0 vs. Web 2.0 vs. Web 3.0 and the rise of semantics


C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + Algorithms
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This course, Algorithms, introduces the subject as both a way of thinking about problems, breaking them down into their component parts, as well as explicit descriptions of computation, the function of which are open to interrogation. We will examine extremely elementary notions of complexity, but focus deeply on the ways in which algorithms create interpretations of data.
Syllabus:
3. CSJxxx Algorithms, 3 units
Description: Algorithms are at the heart of computer processing+they are descriptions of computation. We will present a basic taxonomy of algorithms based on their purpose and discuss complexity (will an algorithm take a lot of time or require significant system resources?). The course will be anchored around several algorithms developed for or by journalism, the digital humanities, computational social science, data journalism, architecture and other fields. Examples might include some aspect of natural language processing, computer vision or statistical/machine learning. Students will learn a process of questioning computation and its artifacts, of examining an algorithm and assessing its capabilities and its biases -- How does it function? What are its implicit assumptions? How should we test its operation? What does it leave out? In the process, students will also learn best practices for writing, documenting and publishing algorithms and code.
Grading: While the precise grading of the course will depend on the instructor, it should be structured around a series of weekly short readings and assignments, 2-3 longer assignments and a final project. The shorter +drills+ help students learn to structure simple objects as data, while the longer assignments involve more substantial building. The final project could be individual or group, with the latter requiring documentation of each participant+s role, and should involve creating a new or applying a significant existing algorithm.
Textbooks: Material for this course will come from journalism (aggregation, algorithmically generated stories, social media mining), from the digital humanities (document clustering, natural language processing) and computational social science. We will also draw readings from design and the arts + Given the expanding role of computation in creative practices, books like Form+Code by Reas and MacWilliams become useful references.
Approximate topic outline:
Introduction
Algorithmic thinking as a strategy for solving problems
Algorithms as recipes for computation
Examples of algorithmic data processing in journalism, the digital humanities and computational social science
Case studies in algorithm design and function
Examples might include:
Algorithmic story generation
Personalization and collaborative filtering
Entity extraction in Natural Language Processing
News aggregation
Decision trees for statistical modeling
Summary statistics in networks
In each case, students will consider the underlying question or computation the algorithm addresses, and break it down into subtasks. They will write a basic implementation on their own and start to ask questions about the operation of each part. Finally, they will work with pre-existing, complete implementation of the algorithm and examine its performance.
Our interest here is in both formal operating characteristics (does this operation take a long time?) as well as the ways in which the algorithm structures knowledge about the data it processes, the inferences it exposes or the picture it draws.
Case study of a classic algorithm
We will consider one simple example to illustrate a traditional analysis of an algorithm + Searching seems like a good choice, with rich alternatives depending on the available data to incorporate
Basic computer architecture
Beginning treatment of notions of complexity


C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + Visualization and Simulation-based Inference
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen, McGregor
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This course is about the ways in which we learn from data, and, more generally, the ways in which data are made expressive. We will consider both numerical as well as visual summaries, offloading the process of inference to simulation methods permutation and resampling.
Syllabus:
CJxxx Data Visualization and Simulation-Based Inference
Description: This course is about seeing the structure of a data set. These structures are stories. +We will start with fairly traditional storytelling tools, from simple descriptive statistics to graphical representations of data. Students will learn projective methods (marginal scatter plots, the Grand Tour, Principal Components) for seeing structures. Throughout, we will present the strengths and limitations of these data presentations. We emphasize that data have no "natural" visual representation and that every view is some kind of reduction. Students will use existing views and create new views of data through a series of longer projects. This is about "doing" and we will take as inspiration a raft of creative practices that produce visuals from data + in design, media art, architecture, geography, mathematics.
Grading: While the precise grading of the course will depend on the instructor, it should be structured around a series of weekly short assignments, 3 longer assignments and a final project. The shorter +drills+ help students learn to interpret existing and craft new visual representations of data, while the longer assignments involve more substantial analyses. The final project could be individual or group, with the latter requiring documentation of each participant+s role.
Readings: In all likelihood, this course will be taught in Python. It will make use of the Pandas package (which exposes a spreadsheet like data table), matplotlib for plotting, and possibly D3 for interactive graphics. In addition to the technical references for these materials, we will also consider a steady stream of examples of visual and numerical analyses from journalism, the digital humanities and computational social science. Lunenfeld+s text on Resampling for Data Analysis is a good instructor+s reference for the inferential component, as are recent papers by Buja et al. on visual inference.
Approximate topic outline:
Introduction
Overview of the graphical display of information
Graphics in journalism
Graphics in the digital humanities
Graphics in computational social science
Data visualization strategies
Types of data and standard representations
Basic design principles
Strategies for interactive displays
Audience constraints
Case studies in visualization
We will again return to the core artifacts studied in Year Zero + Time, location, text, image and networks. Four of these will be treated in depth with case studies. In each case, we track back the source of the graphic (when possible) and the intent of the designer, its prior use by others, its role in the current case study for organizing or synthesizing information, and alternatives (existing or invented).
Students will learn the tools to create these graphics and try some subset of them out for their final projects.
Data+s origin stories
Sources of data, big and small
Data with special (statistical) structure
Tools for assessing uncertainty
Numerical summaries
Resampling, permutation and subsampling
Visual inference and the search for +interestingness+
Final projects



C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + Networks and Networking
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen, Chaintreau (?)
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This class is built on the convergence between social and technical networks. It provides us with an opportunity to study both network science broadly, providing a theoretical framework and grounding in network research, but also to examine the technical implications of living in a society connected by computer and information networks.
Syllabus:
CJxxxx Networks and Networking, 3 units
Description: From social networks to communication and computer networks like the Internet, students will study the design, operation and implications of network structures broadly. Students will learn the key metrics and models that describe a network's structure and growth pattern. Visualization will be an important tool for seeing the organization of a network, and we will consider both the history of these representations and tools for creating them. Data, data processing and various creative and research products are published on and circulate across computer networks. From Twitter posts to Web services to distributed computation in "the cloud," students will learn how to navigate and to code with these networks. Finally, we will study networks as data generators, examining the patterns of sharing events across Twitter, for example.
Grading: While the precise grading of the course will depend on the instructor, it should be structured around a series of weekly short assignments, 3 longer assignments and a final project. The shorter +drills+ help students learn to translate simple questions into code, while the longer assignments involve more substantial building. The final project could be individual or group, with the latter requiring documentation of each participant+s role.

Readings: The readings for this course will vary from Network Science by Albert-L+szl+ Barab+si and Introduction to Social Network Methods by Robert Hanneman and Mark Riddle. In parallel, we will have instructor-selected topics from genetics to computer networking. This course is serving double duty, both introducing students to an important analytical framework for reasoning about systems in the world, but also helping students understand the practical implication of information networks, distributed computing and even network security. As students consider +publication+ broadly, be it via blogposts, microblogs or sharing, or through the creation of an API drawing on multiple web services, they will need a background in the principles of networks broadly defined.

Approximate topic outline:
Introduction
History of networks
The network structure of the Internet, the World Wide Web and social networks
The convergence of social and technological networks
Data-based descriptions and visual representations
Social network analysis and its applications, including the humanities
Social media and its applications, including journalism
Computer networks
Types of computer networks
Network security
Distributed computation, APIs and +the cloud+
Case studies + These will be left to the discretion of the instructor and a possible co-instructor with subject-area expertise
Journalism and publication networks
Networks in humanities research, including history and archeology
Social media and its impact on medicine, law, politics and business
Web 1.0, 2.0 and 3.0
Security on the Internet


C O L U M B I A U N I V E R S I T Y
The Fu Foundation School of Engineering and Applied Science
COMMITTEE ON INSTRUCTION

Proposal for a New Course

COI Number: ignore
Department Decision: ignore
Department Decision Time: ignore
Department Decision User: ignore
COI Decision: ignore
Department: Computer Science
Course Designator: CSJ
Course Prefix: W
Course Number:
Course Semester: Summer, 2014
Title: Year Zero + The Platform
Lecture Hours: 3
Lab Hours: 0
Points: 3
Instructor: Hansen, Kurgan
Prerequisite(s): Admission to Year Zero
Bulletin Description:

Rationale: Year Zero is a post-baccalaureate program designed for students with essentially no computational background. This course will be drawn case studies in geography, the social sciences, journalism, the humanities, design and the arts. In each of these cases, an active literature exists about the ways in which quantification, digitization, +datafication+ and the logic of computing and data processing impact work in the field. +The platform+ is about creativity and its relationship
Syllabus:
CJxxxx The Platform, 3 units
Description: This begins with the idea that computing tools are the products of human ingenuity and effort. They are never neutral and they carry with them the biases of their designers and their design process. "Platform studies" is a new term used to describe investigations into the relationships between computing technologies and the creative or research products they help generate. How do technologies limit or promote certain kinds of creativity? For students who are learning computation for the first time, understanding how data, code and algorithm affect creative practices can be an effective first step toward critical thinking about technology. This will not be a purely theoretical, however, and specific case studies (technologies) and project work will make the ideas concrete.
Grading: While the precise grading of the course will depend on the instructor, it should be structured around a series of weekly short assignments, 3 longer assignments and a final project. The shorter +drills+ help students learn to translate simple questions into code, while the longer assignments involve more substantial building. The final project could be individual or group, with the latter requiring documentation of each participant+s role.

Readings: The readings for this course will be drawn from geography, the social sciences, journalism, the humanities, design and the arts. In each of these cases, an active literature exists about the ways in which quantification, digitization, +datafication+ and the logic of computing and data processing impact work in the field.

Approximate topic outline:
Introduction to HCI and the definitions of an +interface+ to computing and data
Case studies + These will be left to the discretion of the instructor and a possible adjunct or co-instructor with subject-area expertise. Broadly, we are looking to assess how decisions at various stages of a project (data definition, data analysis, inference, publication or sharing) affect the final form of a project or the experience of the work. A case study will involve a subject area (the social science, journalism, the humanities, design and the arts, etc.) crossed with one or more of the platform concepts below.
Quantification
Data representation
Database design and interoperability
Encoding meta-data
Algorithms for learning
Evidence-based practices
Algorithms supporting creative practices
Language design and coding for creative practices
Real-time processing
Sensing and interactivity
Narrative construction
Participation and crowdsourcing
Publication and sharing
Working on a case study means 1) examining the context in which a particular methodology or toolset emerged 2) employing the methodology or toolset to create a work and 3) borrowing options for alternative strategies and implementations given other students+ case study projects.

